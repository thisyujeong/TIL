(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{490:function(t,s,a){"use strict";a.r(s);var n=a(22),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"algorithm-js-백준-10950번-빠른-a-b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-js-백준-10950번-빠른-a-b"}},[t._v("#")]),t._v(" [Algorithm/JS] 백준 10950번 빠른 A+B")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.acmicpc.net/problem/15552",target:"_blank",rel:"noopener noreferrer"}},[t._v("🔗 문제 바로가기"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"question"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#question"}},[t._v("#")]),t._v(" Question")]),t._v(" "),a("p",[t._v("본격적으로 for문 문제를 풀기 전에 주의해야 할 점이 있다. 입출력 방식이 느리면 여러 줄을 입력받거나 출력할 때 시간초과가 날 수 있다는 점이다.")]),t._v(" "),a("p",[t._v("C++을 사용하고 있고 "),a("code",[t._v("cin")]),t._v("/"),a("code",[t._v("cout")]),t._v("을 사용하고자 한다면, "),a("code",[t._v("cin.tie(NULL)")]),t._v("과 "),a("code",[t._v("sync_with_stdio(false)")]),t._v("를 둘 다 적용해 주고, "),a("code",[t._v("endl")]),t._v(" 대신 개행문자("),a("code",[t._v("\\n")]),t._v(")를 쓰자. 단, 이렇게 하면 더 이상 "),a("code",[t._v("scanf")]),t._v("/"),a("code",[t._v("printf")]),t._v("/"),a("code",[t._v("puts")]),t._v("/"),a("code",[t._v("getchar")]),t._v("/"),a("code",[t._v("putchar")]),t._v(" 등 C의 입출력 방식을 사용하면 안 된다.")]),t._v(" "),a("p",[t._v("Java를 사용하고 있다면, "),a("code",[t._v("Scanner")]),t._v("와 "),a("code",[t._v("System.out.println")]),t._v(" 대신 "),a("code",[t._v("BufferedReader")]),t._v("와 "),a("code",[t._v("BufferedWriter")]),t._v("를 사용할 수 있다. "),a("code",[t._v("BufferedWriter.flush")]),t._v("는 맨 마지막에 한 번만 하면 된다.")]),t._v(" "),a("p",[t._v("Python을 사용하고 있다면, "),a("code",[t._v("input")]),t._v(" 대신 "),a("code",[t._v("sys.stdin.readline")]),t._v("을 사용할 수 있다. 단, 이때는 맨 끝의 개행문자까지 같이 입력받기 때문에 문자열을 저장하고 싶을 경우 "),a("code",[t._v(".rstrip()")]),t._v("을 추가로 해 주는 것이 좋다.")]),t._v(" "),a("p",[t._v("또한 입력과 출력 스트림은 별개이므로, 테스트케이스를 전부 입력받아서 저장한 뒤 전부 출력할 필요는 없다. 테스트케이스를 하나 받은 뒤 하나 출력해도 된다.")]),t._v(" "),a("p",[t._v("자세한 설명 및 다른 언어의 경우는 "),a("a",{attrs:{href:"http://www.acmicpc.net/board/view/22716",target:"_blank",rel:"noopener noreferrer"}},[t._v("이 글"),a("OutboundLink")],1),t._v("에 설명되어 있다.")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://www.acmicpc.net/blog/view/55",target:"_blank",rel:"noopener noreferrer"}},[t._v("이 블로그 글"),a("OutboundLink")],1),t._v("에서 BOJ의 기타 여러 가지 팁을 볼 수 있다.")]),t._v(" "),a("h3",{attrs:{id:"input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#input"}},[t._v("#")]),t._v(" Input")]),t._v(" "),a("p",[t._v("첫 줄에 테스트케이스의 개수 T가 주어진다. T는 최대 1,000,000이다. 다음 T줄에는 각각 두 정수 A와 B가 주어진다. A와 B는 1 이상, 1,000 이하이다.")]),t._v(" "),a("h3",{attrs:{id:"output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[t._v("#")]),t._v(" Output")]),t._v(" "),a("p",[t._v("각 테스트케이스마다 A+B를 한 줄에 하나씩 순서대로 출력한다.")]),t._v(" "),a("h2",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("h3",{attrs:{id:"input-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#input-2"}},[t._v("#")]),t._v(" Input")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("5\n1 1\n12 34\n5 500\n40 60\n1000 1000\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h3",{attrs:{id:"output-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-2"}},[t._v("#")]),t._v(" Output")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("2\n46\n505\n100\n2000\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"solution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solution"}},[t._v("#")]),t._v(" Solution")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://thisyujeong.github.io/TIL/algorithm/baekjoon/10950.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("10950 A+B - 3 문제"),a("OutboundLink")],1),t._v("와 유사하다. 하지만 이 문제에서는 ‘빠른’ 출력을 방식을 요구한다. 10950 번 문제에서는 for문 내에서 직접 출력하는 방식이었는데, 문제에서 이 방식은 출력할 때마다 시간 초과가 날 수 있다고 한다.")]),t._v(" "),a("p",[t._v("Java 에서는 맨 마지막에 한번만 출력이 가능하다고 했고, 파이썬에서는 맨 끝에 개행문자까지 입력할 수 있다고 했다.")]),t._v(" "),a("p",[t._v("그렇다면 이를 어떻게 응용할 수 있을까?")]),t._v(" "),a("p",[t._v("Node.js 에서도 맨 마지막에 한 번만 출력하며, 개행문자를 사용해 줄내림을 하면 될 것이라고 생각했다.")]),t._v(" "),a("p",[t._v("풀이를 보면 이해가 쉬울 것이다. 10950번과 같이 for 문 내 출력이 아니라")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("answer")]),t._v(" 라는 빈 문자열 변수를 전역으로 선언하고")]),t._v(" "),a("li",[t._v("for 문 내에서 줄내림을 하는 "),a("code",[t._v("\\n")]),t._v(" 개행 문자를 함께 할당하여")]),t._v(" "),a("li",[t._v("가장 마지막에 "),a("code",[t._v("answer")]),t._v(" 를 출력한다.")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dev/stdin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("rest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" answer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  answer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("answer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("결과는 성공!")])])}),[],!1,null,null,null);s.default=e.exports}}]);